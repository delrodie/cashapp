## Importation de la base de données

Pour importer la base de données existante, veuillez suivre les étapes ci-dessous :

1. Assurez-vous que vous disposez des informations de connexion à la base de données.
Definir la base de données dans le fichier .env `ARCHIVE_DATABASE_URL`
`
DATABASE_URL="mysql://user:pass@127.0.0.1:3306/bd_new?serverVersion=10.11.2-MariaDB&charset=utf8mb4"
 ARCHIVE_DATABASE_URL="mysql://user:pass@127.0.0.1:3306/bd_archive?serverVersion=10.11.2-MariaDB&charset=utf8mb4"
 `
Enregistrer la seconde base de données `bin/console d:d:c --conection=customer`
Configurer le fichier doctrine.yaml
`
doctrine:
    dbal:
        connections:
            default:
                url: '%env(resolve:DATABASE_URL)%'
            customer:
                url: '%env(resolve:ARCHIVE_DATABASE_URL)%'
        default_connection: default

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '15'
    orm:
        default_entity_manager: default
        entity_managers:
            default:
                connection: default
                auto_mapping: true
                mappings:
                    Main:
                        is_bundle: false
                        dir: '%kernel.project_dir%/src/Entity/Main'
                        prefix: 'App\Entity\Main'
                        alias: Main
                    Cash:
                        is_bundle: false
                        dir: '%kernel.project_dir%/src/Entity/Main'
                        prefix: 'App\Entity\Main'
                        alias: Cash
            customer:
                connection: customer
                mappings:
                    Customer:
                        is_bundle: false
                        dir: '%kernel.project_dir%/src/Entity/Archive'
                        prefix: 'App\Entity\Archive'
                        alias: Customer
                    Old:
                        is_bundle: false
                        dir: '%kernel.project_dir%/src/Entity'
                        prefix: 'App\Entity\'
                        alias: Old
`

configurer le fichier service.yaml
`
parameters:
    ARCHIVE_DATABASE_URL: '%env(ARCHIVE_DATABASE_URL)%'
`
2. Créer la commande
`
<?php

namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

#[AsCommand(
    name: 'app:import-db',
    description: 'Add a short description for your command',
)]
class ImportDatabaseCommand extends Command
{
    private $startTime;
    private $endTime;

    public function __construct(private ParameterBagInterface $params)
    {
        parent::__construct();
    }
    protected function configure(): void
    {
        $this
            ->addOption(
                'import-env',
                null,
                InputOption::VALUE_OPTIONAL,
                'L\'environnement dans lequel la commande doit s\'exécuter.',
                'dev'
            )
            ->addOption(
                'skip-existing',
                null,
                InputOption::VALUE_OPTIONAL,
                'Ignorer les tables existantes lors de l\'importation',
                'dev'
            )
            ->setDescription("Importation de la base de donnée")
            ->setHelp("command")
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        // Creation de porgressBar
        $progressBar = new ProgressBar($output);
        $progressBar->start();

        // On utilise le service de paramètres pour acceder aux variables d'environnement
        $env = $input->getOption('import-env');
        $skipExistingTables = $input->getOption('skip-existing');

        $archiveDatabaseUrl = $this->params->get('ARCHIVE_DATABASE_URL');

        // Extraction du nom de la base de données via ARCHIVE_DATABASE_URL
        preg_match('/\/([^\/?]+)\?/', $archiveDatabaseUrl, $matches);
        $databaseName = $matches[1];

        // Importation de la base de données
        $importCommand = sprintf(
            'mysql -u %s -p%s %s < public/.sql/cashapp_archive.sql',
            $this->parseDatabaseUser($archiveDatabaseUrl),
            $this->parseDatabasePassword($archiveDatabaseUrl),
            $databaseName
        );

        if ($skipExistingTables) $importCommand.= ' --force';

        // Executer l'importation
        $process = Process::fromShellCommandline($importCommand);
        $process->setTimeout(600);

        $this->startTime  = microtime(true);
        $lastOutputLength = 0;
        $process->run(function ($type, $buffer) use ($progressBar, $io, &$lastOutputLength){
            $progressBar->advance();

            // Calculé le temps écoulé
            $currentTime = microtime(true);
            $elapsedTime = $currentTime - $this->startTime;

            // Calculer le temps estimé restant
            $process = $progressBar->getProgress();
            $estimatedTimeRemaining = $elapsedTime * (100 / $process) - $elapsedTime;

            // Afficher le temps écoulé et le temps estimé restant
            $output = sprintf(
                "Temps écoulé: %.2f secondes, Temps restant estimé: %.2f secondes",
                $elapsedTime,
                $estimatedTimeRemaining
            );

            // Effacer la ligne précédente
            if ($lastOutputLength > 0){
                $io->write(str_repeat("\x08", $lastOutputLength));
            }

            // Afficher la nouvelle ligne
            $io->write($output);
            $lastOutputLength = strlen($output);
        });

        $this->endTime = microtime(true);
        $totalTime = $this->endTime - $this->startTime;
        $io->writeln(sprintf("Total temps d'exécution: %.2f seconds", $totalTime));

        if (!$process->isSuccessful())
            throw new ProcessFailedException($process);

        $progressBar->finish();
        $io->success('Base de données importées avec succès!');

        return Command::SUCCESS;
    }

    private function parseDatabaseUser(\UnitEnum|float|array|bool|int|string|null $archiveDatabaseUrl): string
    {
        preg_match('/\/\/([^:]+):/', $archiveDatabaseUrl, $matches);
        return $matches[1];
    }

    private function parseDatabasePassword(\UnitEnum|float|array|bool|int|string|null $archiveDatabaseUrl): string
    {
        preg_match('/mysql:\/\/[^:]+:([^@]+)/', $archiveDatabaseUrl, $matches);
        return $matches[1];
    }

}

`

3. Exécutez la commande suivante : `bin/console app:import-db`
Cette commande importera la base de données existante.
4. En cas d'erreur de temps, vous pouvez ré-exécuter la commande avec l'option `--skip-existing` pour ignorer les tables existantes : `bin/console app:import-db --skip-existing=true`

Assurez-vous d'exécuter ces commandes dans l'environnement approprié et de suivre les précautions nécessaires, car l'importation de la base de données peut entraîner la perte de données existantes.

*5. Generer des entités depuis la base de données existante
`bin/console doctrine:mapping:import "App\Entity\Archive" annotation --path=src/Entity/Archive --em=customer`

!Important, installer `doctrine/annotations` via `composer require doctrine/annotations`

*6. Generer les setters et getters des entités importées
`bin/console doctrine:maker --regenerate App\Entity\Archive\Domaine`

*7. Copie des données des tables archives dans les nouvelles tables Domaine, Categorie et Produit
`
<?php

namespace App\Command;

use App\Entity\Main\Domaine;
use App\Repository\Archive\ArchiveDomaineRepository;
use App\Repository\Main\DomaineRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:copy-domaine',
    description: 'Copie des données de la table archive domaine dans la nouvelle table domaine.',
)]
class CopyDomaineCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $entityManager, private ArchiveDomaineRepository $archiveDomaineRepository
    )
    {
        parent::__construct();
    }

//    protected function configure(): void
//    {
//        $this
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
//        ;
//    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $progressBar = new ProgressBar($output);
        $progressBar->start();

        //$test = $this->entityManager->getRepository()
//        $archiveRepo = $this->domaineRepository->
        $nouveauRepo = $this->entityManager->getRepository(Domaine::class);
        $archiveDomaines = $this->archiveDomaineRepository->findAll();

        $nb=0;
        foreach ($archiveDomaines as $domaine){
            // Verification de la non existence de l'information dans la table
            $verif = $nouveauRepo->findOneBy(['slug' => $domaine->getSlug()]);
            if (!$verif) {
                $nvDomaine = new Domaine();
                $nvDomaine->setCode($domaine->getCode());
                $nvDomaine->setLibelle($domaine->getLibelle());
                $nvDomaine->setSlug($domaine->getSlug());

                $this->entityManager->persist($nvDomaine);
                $progressBar->advance();
                $nb++;
            }
        }

        $this->entityManager->flush();
        $progressBar->finish();

        $io->success("Les {$nb} lignes de domaines ont été copiées avec succès!");

        return Command::SUCCESS;
    }
}
`
`
<?php

namespace App\Command;

use App\Entity\Main\Categorie;
use App\Repository\Archive\ArchiveCategorieRepository;
use App\Repository\Main\CategorieRepository;
use App\Repository\Main\DomaineRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:copy-categorie',
    description: 'Copie des données de la table archive Categorie dans la nouvelle table categorie',
)]
class CopyCategorieCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $entityManager, private DomaineRepository $domaineRepository,
        private ArchiveCategorieRepository $archiveCategorieRepository, private CategorieRepository $categorieRepository
    )
    {
        parent::__construct();
    }
//    protected function configure(): void
//    {
//        $this
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
//        ;
//    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $progressBar = new ProgressBar($output);
        $progressBar->start();

        $archiveCategories = $this->archiveCategorieRepository->findAll();

        $nb=0;
        foreach ($archiveCategories as $category){
            $verif = $this->categorieRepository->findOneBy(['slug' => $category->getSlug()]);
            $nvDomaine = $this->domaineRepository->findOneBy(['slug' =>$category->getDomaine()->getSlug()]);

            if (!$verif AND $nvDomaine){
                $nvCategorie = new Categorie();
                $code = $nvDomaine->getCode().''. 10+$nb;
                $nvCategorie->setCode($code);
                $nvCategorie->setLibelle($category->getLibelle());
                $nvCategorie->setDomaine($nvDomaine);
                $nvCategorie->setSlug($category->getSlug());

                $this->entityManager->persist($nvCategorie);
                $nb++;
                $progressBar->advance();
            }
        }

        $this->entityManager->flush();
        $progressBar->finish();

        $io->success("Les {$nb} lignes de catégories ont été copiées avec succès.");

        return Command::SUCCESS;
    }

}
`
`
<?php

namespace App\Command;

use App\Entity\Main\Produit;
use App\Repository\Archive\ArchiveProduitRepository;
use App\Repository\Main\CategorieRepository;
use App\Repository\Main\ProduitRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:copy-produit',
    description: 'Copie des données de la table archive Produit dans la nouvelle table Produit',
)]
class CopyProduitCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $entityManager, private ArchiveProduitRepository $archiveProduitRepository,
        private ProduitRepository $produitRepository, private CategorieRepository $categorieRepository
    )
    {
        parent::__construct();
    }

//    protected function configure(): void
//    {
//        $this
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
//        ;
//    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        set_time_limit(300);
        $io = new SymfonyStyle($input, $output);

        // Création de l'objet ProgressBar
        $progressBar = new ProgressBar($output);
        $progressBar->start();

        $archiveProduits = $this->archiveProduitRepository->getListProduitMoreThanZero();

        $nb=0;
        foreach ($archiveProduits as $produit){
            $verif = $this->produitRepository->findOneBy(['slug' => $produit->getSlug()]);
            $nvCategorie = $this->categorieRepository->findOneBy(['slug' => $produit->getCategorie()->getSlug()]);

            if (!$verif AND $nvCategorie){
                $nvProduit = new Produit();
                $reference = $nvCategorie->getCode()."". 1001 + $nb;
                $nvProduit->setReference($reference);
                $nvProduit->setCodebarre($produit->getCodebarre());
                $nvProduit->setLibelle($produit->getLibelle());
                $nvProduit->setPrixAchat($produit->getPrixAchat());
                $nvProduit->setPrixVente($produit->getPrixVente());
                $nvProduit->setStock($produit->getStock());
                $nvProduit->setSlug($produit->getSlug());
                $nvProduit->setCategorie($nvCategorie);

                $this->entityManager->persist($nvProduit);
                $nb++;

                $progressBar->advance();
            }
        }

        $this->entityManager->flush();
        $progressBar->finish();

        $io->success("Les {$nb} lignes de la table archive Produit ont été copiées avec succès!");

        return Command::SUCCESS;
    }

}
`